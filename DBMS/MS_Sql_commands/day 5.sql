create table emp_aggr(id int,name varchar(20),Gender varchar(10),sl int,city varchar(20));

insert into emp_aggr values(1,'RAMESH','MALE',1000,'CHENNAI'); 
insert into emp_aggr values(2,'RAKESH','MALE',1200,'HYD'); 
insert into emp_aggr values(3,'PRIYA','FEMALE',2200,'CHENNAI'); 
insert into emp_aggr values(4,'ABHI','FEMALE',2500,'HYD'); 
insert into emp_aggr values(5,'SURESH','MALE',3200,'BLR'); 
insert into emp_aggr values(6,'MUKESH','MALE',4200,'CHENNAI'); 
insert into emp_aggr values(7,'DIANA','FEMALE',6200,'BLR'); 
insert into emp_aggr values(8,'GAYATRI','FEMALE',5200,'BLR'); 
insert into emp_aggr values(9,'VIVEK','MALE',7200,'HYD'); 
insert into emp_aggr values(10,'HARRY','MALE',8200,'CHENNAI');  

SELECT * FROM EMP_AGGR

SELECT COUNT(SAL) FROM EMP;
SELECT COUNT(*) FROM EMP;

--WORKING WITH GROUP BY CLAUSE:
SELECT DEPTNO,SAL FROM EMP
SELECT DEPTNO,SUM(SAL) AS SUM_SAL FROM EMP GROUP BY DEPTNO;
SELECT DEPTNO,JOB,SUM(SAL) AS SUM_SAL FROM EMP GROUP BY DEPTNO,JOB;

--CITY WISE SUM(SAL):
SELECT CITY,SUM(SL) AS SUM_SAL FROM EMP_AGGR GROUP BY CITY;

--CITY / GENDER WISE SUM(SAL):
SELECT CITY,GENDER, SUM(SL) AS SUM_SAL FROM EMP_AGGR GROUP BY CITY,GENDER;
--SELECT GENDER, SUM(SL) AS SUM_SAL FROM EMP_AGGR GROUP BY GENDER;
SELECT CITY,GENDER,SUM(SL) AS SUM_SL FROM EMP_AGGR GROUP BY CITY,GENDER ORDER BY CITY,GENDER;

SELECT * FROM EMP_AGGR
--USING MORE THAN 1 AGG FUNCTION IN A SINGLE SELECT STMNT:
SELECT CITY,GENDER, SUM(SL) AS SUM_SAL ,COUNT(GENDER) AS CNT 
FROM EMP_AGGR GROUP BY CITY,GENDER 
ORDER BY CITY,GENDER;


-- FILTRATION BY USING WHERE CLAUSE:ON A NON-AGGREGATED COLUMN: 'GENDER'

SELECT CITY,GENDER, SUM(SL) AS SUM_SAL ,COUNT(GENDER) AS CNT 
FROM EMP_AGGR WHERE GENDER = 'MALE' GROUP BY CITY,GENDER 
ORDER BY CITY,GENDER;

-- FILTRATION BY USING HAVING CLAUSE:

SELECT CITY,GENDER, SUM(SL) AS SUM_SAL ,COUNT(GENDER) AS CNT 
FROM EMP_AGGR  GROUP BY CITY,GENDER HAVING GENDER = 'MALE'
ORDER BY CITY,GENDER;

-- FILTRATION BY USING WHERE CLAUSE:ON A AGGREGATED COLUMN: 'SL'

SELECT CITY,GENDER, SUM(SL) AS SUM_SAL ,COUNT(GENDER) AS CNT 
FROM EMP_AGGR WHERE SUM(SL) >= 1500 GROUP BY CITY,GENDER 
ORDER BY CITY,GENDER;  

-- FILTRATION BY USING HAVING CLAUSE:
SELECT CITY,GENDER, SUM(SL) AS SUM_SAL ,COUNT(GENDER) AS CNT 
FROM EMP_AGGR GROUP BY CITY,GENDER HAVING SUM(SL)>=1500
ORDER BY CITY,GENDER;

SELECT CITY,GENDER, SUM(SL) AS SUM_SAL ,COUNT(GENDER) AS CNT 
FROM EMP_AGGR  GROUP BY CITY,GENDER HAVING SUM(SL) >= 4500
ORDER BY CITY,GENDER;


--LOOOOOOOOOOOOOOOOOOOOOOOOOOOPS

--WHILE LOOPS
--#1
DECLARE @i INTEGER;
SET @i = 1;
 
WHILE @i <= 10
BEGIN
   PRINT CONCAT('Pass...', @i);
   SET @i = @i + 1;
END;

--#2
DECLARE @stud_value INT=10;
----SET @stud_value = 0;

WHILE @stud_value <= 101
BEGIN
PRINT CONCAT('Mark = ',@STUD_VALUE);
SET @stud_value = @stud_value + 10;
IF @stud_value=30
	PRINT 'HI';
	CONTINUE;
--IF @stud_value=40
--	GOTO VAL_40:

END; 
VAL_40:
	PRINT 'NO.40';

GO 2

DECLARE @stud_value1 INT=45;
PRINT @STUD_VALUE1;
--SELECT @stud_value1
GO 4



-------------SUB QUERIES----------------

--SINGLE ROW SQ
SELECT * FROM EMP;
SELECT * FROM emp WHERE sal > (SELECT sal FROM emp WHERE ename = 'JONES'); 

--MULTI ROW SQ USING IN,ANY,ALL
SELECT * FROM emp WHERE sal > ANY (SELECT sal FROM emp WHERE sal BETWEEN 2500 AND 4000); 

SELECT * FROM emp WHERE sal < ANY (SELECT sal FROM emp WHERE sal BETWEEN 2500 AND 4000);


SELECT * FROM emp WHERE sal > ALL (SELECT sal FROM emp WHERE sal BETWEEN 2500 AND 4000); 

SELECT * FROM emp WHERE sal <= ALL (SELECT sal FROM emp WHERE sal BETWEEN 2500 AND 4000);  


SELECT * FROM emp WHERE sal IN (SELECT sal FROM emp WHERE deptno=10); 

--NESTED SQ
SELECT * FROM emp WHERE sal = (SELECT MAX (sal) FROM emp WHERE sal <  
(SELECT MAX (sal) FROM EMP)); 

--SELECT CLAUSE
SELECT empno, ename, sal, (SELECT MAX (sal) FROM emp) maxsal FROM emp;

SELECT empno, ename, sal, deptno FROM emp WHERE deptno IN(SELECT deptno FROM dept WHERE loc='CHICAGO'); 
SELECT * FROM EMP



------------SEQUENCES------------
	
--CREATING AN INCREMENTING SEQUENCE: 
CREATE SEQUENCE [DBO].[SEQUNCE_OBJECT] 
AS INT 
START WITH 1 
INCREMENT BY 1 

--GENERATING THE NEXT VALUE FOR THE SEQUENCE: 
SELECT NEXT VALUE FOR [DBO].[SEQUNCE_OBJECT]; 
 
--RETRIEVING THE CURRENT VALUE OF THE SEQUENCE: 
SELECT CURRENT_VALUE FROM SYS.sequences WHERE NAME = 'SEQUNCE_OBJECT';


--RESETTING THE SEQUENCE VALUE: 
ALTER SEQUENCE [SEQUNCE_OBJECT] RESTART WITH 2; 

--CHECKING THE SEQUENCE WITH TABLE VALUES: 
CREATE TABLE EMP_SEQ_TEST(ID INT,NAME VARCHAR(20),SAL INT); 

--CHECKING THE SEQUENCE VALUE FOR ID COLUMN IN THE TABLE BY USING SEQUENCE: 
INSERT INTO EMP_SEQ_TEST VALUES(NEXT VALUE FOR [DBO].[SEQUNCE_OBJECT],'RAMESH',1000); 

INSERT INTO EMP_SEQ_TEST VALUES(NEXT VALUE FOR [DBO].[SEQUNCE_OBJECT],'RAKESH',1200); 

INSERT INTO EMP_SEQ_TEST VALUES(NEXT VALUE FOR [DBO].[SEQUNCE_OBJECT],'SURESH',1300); 

INSERT INTO EMP_SEQ_TEST VALUES(NEXT VALUE FOR [DBO].[SEQUNCE_OBJECT],'SOMESH',1400); 

INSERT INTO EMP_SEQ_TEST VALUES(NEXT VALUE FOR [DBO].[SEQUNCE_OBJECT],'MAHESH',1500); 
 
SELECT * FROM EMP_SEQ_TEST;

 --CREATING A DECREMENTING SEQUENCE: 
CREATE SEQUENCE [DBO].[DEC_SEQUNCE_OBJECT] 
AS INT 
START WITH 100 
INCREMENT BY -1 

--GENERATING THE NEXT VALUE FOR THE DECREMENTING SEQUENCE: 
SELECT NEXT VALUE FOR [DBO].[DEC_SEQUNCE_OBJECT]; 

--RESETTING THE DEC_SEQUENCE VALUE: 
ALTER SEQUENCE [DEC_SEQUNCE_OBJECT] RESTART WITH 100; 

--CREATING A SEQUENCE WITH MIN AND MAX VALUES: 
CREATE SEQUENCE [DBO].[MIN_MAX_SEQUNCE_OBJECT] 
AS INT 
START WITH 100 
INCREMENT BY 10 
MINVALUE 100 
MAXVALUE 150

--GENERATING THE NEXT VALUE FOR THE MIN_MAX_SEQUNCE: 
SELECT NEXT VALUE FOR [DBO].[MIN_MAX_SEQUNCE_OBJECT]; 
 
--RESETTING THE MIN_MAX_SEQUENCE VALUE: 
ALTER SEQUENCE [MIN_MAX_SEQUNCE_OBJECT] RESTART WITH 100; 

--ALTERING A CREATED SEQUENCE WITH CYCLE OPTION FOR THE ABOVE SEQUENCE: 
ALTER SEQUENCE [DBO].[MIN_MAX_SEQUNCE_OBJECT] 
INCREMENT BY 10 
MINVALUE 100 
MAXVALUE 150 
CYCLE

--CREATING A SEQUENCE WITH CACHE OPTION: 
CREATE SEQUENCE [DBO].[CACHE_SEQUNCE_OBJECT] 
AS INT 
START WITH 1 
INCREMENT BY 1 
CACHE 10  

--GENERATING THE NEXT VALUE FOR THE MIN_MAX_SEQUNCE: 
SELECT NEXT VALUE FOR [DBO].[CACHE_SEQUNCE_OBJECT]; 

--COMMAND TO DROP THE SEQUENCE: 
--DROP SEQUENCE <SEQ_NAME> 
DROP SEQUENCE [DBO].[CACHE_SEQUNCE_OBJECT]; 

-- BY USING IDENTITY:  -- AUTO_INCREMENT:

CREATE TABLE EMP_SEQ(ID INT IDENTITY(1,1), ENAME VARCHAR(10));

INSERT INTO EMP_SEQ (ENAME) VALUES ('DINESH');
INSERT INTO EMP_SEQ (ENAME) VALUES ('RAMESH');
INSERT INTO EMP_SEQ (ENAME) VALUES ('RAKESH');
INSERT INTO EMP_SEQ (ENAME) VALUES ('MUKESH');
INSERT INTO EMP_SEQ (ENAME) VALUES ('SOMESH');

SELECT * FROM EMP_SEQ;













	




























